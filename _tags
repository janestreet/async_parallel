# OASIS_START
# DO NOT EDIT (digest: 7c96e9726a03f32ee2069c9e3789ad5b)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library parallel
"lib/parallel.cmxs": use_parallel
"lib/channel.cmx": for-pack(Parallel)
"lib/hub.cmx": for-pack(Parallel)
"lib/import.cmx": for-pack(Parallel)
"lib/intf.cmx": for-pack(Parallel)
"lib/master_process.cmx": for-pack(Parallel)
"lib/std.cmx": for-pack(Parallel)
"lib/token.cmx": for-pack(Parallel)
"lib/worker_process.cmx": for-pack(Parallel)
<lib/*.ml{,i}>: pkg_async
<lib/*.ml{,i}>: pkg_bin_prot
<lib/*.ml{,i}>: pkg_bin_prot.syntax
<lib/*.ml{,i}>: pkg_core
<lib/*.ml{,i}>: pkg_sexplib
<lib/*.ml{,i}>: pkg_sexplib.syntax
<lib/*.ml{,i}>: pkg_threads
# Executable deep
<examples/deep.{native,byte}>: use_parallel
<examples/deep.{native,byte}>: pkg_async
<examples/deep.{native,byte}>: pkg_bin_prot
<examples/deep.{native,byte}>: pkg_bin_prot.syntax
<examples/deep.{native,byte}>: pkg_core
<examples/deep.{native,byte}>: pkg_sexplib
<examples/deep.{native,byte}>: pkg_sexplib.syntax
<examples/deep.{native,byte}>: pkg_threads
# Executable echo_server
<examples/echo_server.{native,byte}>: use_parallel
<examples/echo_server.{native,byte}>: pkg_async
<examples/echo_server.{native,byte}>: pkg_bin_prot
<examples/echo_server.{native,byte}>: pkg_bin_prot.syntax
<examples/echo_server.{native,byte}>: pkg_core
<examples/echo_server.{native,byte}>: pkg_sexplib
<examples/echo_server.{native,byte}>: pkg_sexplib.syntax
<examples/echo_server.{native,byte}>: pkg_threads
# Executable pingpong
<examples/pingpong.{native,byte}>: use_parallel
<examples/pingpong.{native,byte}>: pkg_async
<examples/pingpong.{native,byte}>: pkg_bin_prot
<examples/pingpong.{native,byte}>: pkg_bin_prot.syntax
<examples/pingpong.{native,byte}>: pkg_core
<examples/pingpong.{native,byte}>: pkg_sexplib
<examples/pingpong.{native,byte}>: pkg_sexplib.syntax
<examples/pingpong.{native,byte}>: pkg_threads
# Executable ring
<examples/ring.{native,byte}>: use_parallel
<examples/ring.{native,byte}>: pkg_async
<examples/ring.{native,byte}>: pkg_bin_prot
<examples/ring.{native,byte}>: pkg_bin_prot.syntax
<examples/ring.{native,byte}>: pkg_core
<examples/ring.{native,byte}>: pkg_sexplib
<examples/ring.{native,byte}>: pkg_sexplib.syntax
<examples/ring.{native,byte}>: pkg_threads
# Executable simple
<examples/simple.{native,byte}>: use_parallel
<examples/simple.{native,byte}>: pkg_async
<examples/simple.{native,byte}>: pkg_bin_prot
<examples/simple.{native,byte}>: pkg_bin_prot.syntax
<examples/simple.{native,byte}>: pkg_core
<examples/simple.{native,byte}>: pkg_sexplib
<examples/simple.{native,byte}>: pkg_sexplib.syntax
<examples/simple.{native,byte}>: pkg_threads
# Executable wide
<examples/wide.{native,byte}>: use_parallel
<examples/wide.{native,byte}>: pkg_async
<examples/wide.{native,byte}>: pkg_bin_prot
<examples/wide.{native,byte}>: pkg_bin_prot.syntax
<examples/wide.{native,byte}>: pkg_core
<examples/wide.{native,byte}>: pkg_sexplib
<examples/wide.{native,byte}>: pkg_sexplib.syntax
<examples/wide.{native,byte}>: pkg_threads
<examples/*.ml{,i}>: use_parallel
<examples/*.ml{,i}>: pkg_async
<examples/*.ml{,i}>: pkg_bin_prot
<examples/*.ml{,i}>: pkg_bin_prot.syntax
<examples/*.ml{,i}>: pkg_core
<examples/*.ml{,i}>: pkg_sexplib
<examples/*.ml{,i}>: pkg_sexplib.syntax
<examples/*.ml{,i}>: pkg_threads
# OASIS_STOP
<lib{,_test}/*.ml{,i}>     : syntax_camlp4o
