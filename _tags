# OASIS_START
# DO NOT EDIT (digest: 8eabfbade879e7ced5bce145f9bee11f)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library async_parallel
"lib/async_parallel.cmxs": use_async_parallel
"lib/channel.cmx": for-pack(Async_parallel)
"lib/hub.cmx": for-pack(Async_parallel)
"lib/import.cmx": for-pack(Async_parallel)
"lib/intf.cmx": for-pack(Async_parallel)
"lib/master_process.cmx": for-pack(Async_parallel)
"lib/std.cmx": for-pack(Async_parallel)
"lib/token.cmx": for-pack(Async_parallel)
"lib/worker_process.cmx": for-pack(Async_parallel)
<lib/*.ml{,i,y}>: package(async)
<lib/*.ml{,i,y}>: package(bin_prot)
<lib/*.ml{,i,y}>: package(bin_prot.syntax)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(threads)
# Executable deep
<examples/deep.{native,byte}>: package(async)
<examples/deep.{native,byte}>: package(bin_prot)
<examples/deep.{native,byte}>: package(bin_prot.syntax)
<examples/deep.{native,byte}>: package(core)
<examples/deep.{native,byte}>: package(sexplib)
<examples/deep.{native,byte}>: package(sexplib.syntax)
<examples/deep.{native,byte}>: package(threads)
<examples/deep.{native,byte}>: use_async_parallel
# Executable echo_server
<examples/echo_server.{native,byte}>: package(async)
<examples/echo_server.{native,byte}>: package(bin_prot)
<examples/echo_server.{native,byte}>: package(bin_prot.syntax)
<examples/echo_server.{native,byte}>: package(core)
<examples/echo_server.{native,byte}>: package(sexplib)
<examples/echo_server.{native,byte}>: package(sexplib.syntax)
<examples/echo_server.{native,byte}>: package(threads)
<examples/echo_server.{native,byte}>: use_async_parallel
# Executable pingpong
<examples/pingpong.{native,byte}>: package(async)
<examples/pingpong.{native,byte}>: package(bin_prot)
<examples/pingpong.{native,byte}>: package(bin_prot.syntax)
<examples/pingpong.{native,byte}>: package(core)
<examples/pingpong.{native,byte}>: package(sexplib)
<examples/pingpong.{native,byte}>: package(sexplib.syntax)
<examples/pingpong.{native,byte}>: package(threads)
<examples/pingpong.{native,byte}>: use_async_parallel
# Executable ring
<examples/ring.{native,byte}>: package(async)
<examples/ring.{native,byte}>: package(bin_prot)
<examples/ring.{native,byte}>: package(bin_prot.syntax)
<examples/ring.{native,byte}>: package(core)
<examples/ring.{native,byte}>: package(sexplib)
<examples/ring.{native,byte}>: package(sexplib.syntax)
<examples/ring.{native,byte}>: package(threads)
<examples/ring.{native,byte}>: use_async_parallel
# Executable simple
<examples/simple.{native,byte}>: package(async)
<examples/simple.{native,byte}>: package(bin_prot)
<examples/simple.{native,byte}>: package(bin_prot.syntax)
<examples/simple.{native,byte}>: package(core)
<examples/simple.{native,byte}>: package(sexplib)
<examples/simple.{native,byte}>: package(sexplib.syntax)
<examples/simple.{native,byte}>: package(threads)
<examples/simple.{native,byte}>: use_async_parallel
# Executable wide
<examples/wide.{native,byte}>: package(async)
<examples/wide.{native,byte}>: package(bin_prot)
<examples/wide.{native,byte}>: package(bin_prot.syntax)
<examples/wide.{native,byte}>: package(core)
<examples/wide.{native,byte}>: package(sexplib)
<examples/wide.{native,byte}>: package(sexplib.syntax)
<examples/wide.{native,byte}>: package(threads)
<examples/wide.{native,byte}>: use_async_parallel
<examples/*.ml{,i,y}>: package(async)
<examples/*.ml{,i,y}>: package(bin_prot)
<examples/*.ml{,i,y}>: package(bin_prot.syntax)
<examples/*.ml{,i,y}>: package(core)
<examples/*.ml{,i,y}>: package(sexplib)
<examples/*.ml{,i,y}>: package(sexplib.syntax)
<examples/*.ml{,i,y}>: package(threads)
<examples/*.ml{,i,y}>: use_async_parallel
# OASIS_STOP
<lib{,_test}/*.ml{,i}>     : syntax_camlp4o
